notifi.py
__________
from ncclient import manager

# Device details
DEVICE_PARAMS = {
    "host": "10.133.35.148",
    "port": 830,
    "username": "admin",
    "password": "tcs123",
    "hostkey_verify": False,
    "allow_agent": False,
    "look_for_keys": False
}

def connect_netconf():
    """Establish NETCONF session."""
    try:
        session = manager.connect(**DEVICE_PARAMS)
        print("Connected to NETCONF server.")
        return session
    except Exception as e:
        print(f"Connection failed: {e}")
        return None

def create_subscription(session):
    """Send NETCONF RPC to subscribe to notifications."""
    rpc = """<create-subscription xmlns="urn:ietf:params:xml:ns:netconf:notification:1.0"/>"""
    
    try:
        response = session.dispatch(rpc)
        print("Subscription created successfully.")
        print(response)
    except Exception as e:
        print(f"Subscription error: {e}")

def listen_notifications(session):
    """Continuously listen for notifications."""
    print("Listening for notifications...")
    try:
        while True:
            notification = session.take_notification()
            if notification:
                print("Received Notification:\n", notification.notification_xml)
    except Exception as e:
        print(f"Error receiving notifications: {e}")

def main():
    session = connect_netconf()
    if session:
        create_subscription(session)
        listen_notifications(session)
        session.close_session()

if __name__ == "__main__":
    main()







test.xml:
---------
<nacm xmlns="urn:ietf:params:xml:ns:yang:ietf-netconf-acm">
    <enable-nacm>false</enable-nacm>
</nacm>



cfg1.py:
--------------

import subprocess
import os

def import_configuration_using_sysrepocfg(config_file):
    try:
        if not os.path.isfile(config_file):
            print(f"Error: The file {config_file} does not exist.")
            return

        command = ["sysrepocfg", "--import", config_file,"--datastore", "running", "--module", "ietf-netconf-acm"]
        result = subprocess.run(command, capture_output=True, text=True)

        if result.returncode == 0:
            print(f"Configuration from '{config_file}' successfully imported to Sysrepo.")
        else:
            print(f"Error occurred: {result.stderr}")

    except Exception as e:
        print(f"Error occurred: {e}")

if __name__ == "__main__":
    config_file = "/home/tcs/Sysrepository/Python/Sysrepocfg/test.xml"
    import_configuration_using_sysrepocfg(config_file) 












1.py:
-------------

import subprocess

def export_sysrepo_configuration(file_path, datastore="running", module="ietf-netconf-acm", format="xml"):
    command = ["sysrepocfg", "--export"]

    if file_path:
        command.append(file_path)
    if datastore:
        command.extend(["--datastore", datastore])
    if module:
        command.extend(["--module", module])
    if format:
        command.extend(["--format", format])

    try:

        result = subprocess.run(command, capture_output=True, text=True, check=True)
        print(f"Export successful:\n{result.stdout}")

    except subprocess.CalledProcessError as e:
        print(f"Error occurred while executing the export command: {e.stderr}")

    except FileNotFoundError:
        print("sysrepocfg command not found. Please ensure sysrepocfg is installed and available in the PATH.")

    except Exception as e:
        print(f"An unexpected error occurred: {str(e)}")


if __name__ == "__main__":

    export_sysrepo_configuration(file_path="/home/tcs/Sysrepository/Python/Sysrepocfg/export/ietf-netconf-acm_configuration.xml", datastore="running", module="ietf-netconf-acm", format="xml")







