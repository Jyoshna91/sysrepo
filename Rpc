
<rpc message-id="2" xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
    <get>
        <filter type="subtree">
            <netconf-state xmlns="urn:ietf:params:xml:ns:yang:ietf-netconf-monitoring"/>
        </filter>
    </get>
</rpc>



<rpc message-id="1" xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
    <get>
        <filter type="subtree">
            <capabilities xmlns="urn:ietf:params:xml:ns:yang:ietf-netconf-monitoring"/>
        </filter>
    </get>
</rpc>



<rpc message-id="1" xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
    <get>
        <filter type="subtree">
            <capabilities xmlns="urn:ietf:params:xml:ns:yang:ietf-netconf-monitoring"/>
        </filter>
    </get>
</rpc>





<rpc xmlns="urn:ietf:params:xml:ns:netconf:base:1.0" message-id="101">
    <create-subscription xmlns="urn:ietf:params:xml:ns:netconf:notification:1.0">
        <stream>NETCONF</stream>
    </create-subscription>
</rpc>
..






<?xml version="1.0" encoding="UTF-8"?>
<rpc xmlns="urn:ietf:params:xml:ns:netconf:base:1.0" message-id="101">
  <create-subscription xmlns="urn:ietf:params:xml:ns:netconf:notification:1.0">
    <filter type="subtree">
      <interfaces-state xmlns="urn:ietf:params:xml:ns:yang:ietf-interfaces"/>
    </filter>
  </create-subscription>
</rpc>
]]>]]>



<?xml version="1.0"?>
<nf:rpc xmlns:nf="urn:ietf:params:xml:ns:netconf:base:1.0"
         xmlns:nxos="http://www.cisco.com/nxos:1.0" 
         message-id="100">
  <nxos:exec-command>
    <nxos:cmd>show netconf-yang capabilities</nxos:cmd>
  </nxos:exec-command>
</nf:rpc>]]>]]>




























import subprocess

def export_sysrepo_configuration(file_path, datastore="running", module="ietf-netconf-acm", format="xml"):
    command = ["sysrepocfg", "--export"]

    if file_path:
        command.append(file_path)
    if datastore:
        command.extend(["--datastore", datastore])
    if module:
        command.extend(["--module", module])
    if format:
        command.extend(["--format", format])

    try:

        result = subprocess.run(command, capture_output=True, text=True, check=True)
        print(f"Export successful:\n{result.stdout}")

    except subprocess.CalledProcessError as e:
        print(f"Error occurred while executing the export command: {e.stderr}")

    except FileNotFoundError:
        print("sysrepocfg command not found. Please ensure sysrepocfg is installed and available in the PATH.")

    except Exception as e:
        print(f"An unexpected error occurred: {str(e)}")


if __name__ == "__main__":

    export_sysrepo_configuration(file_path="/home/tcs/Sysrepository/Python/Sysrepocfg/export/ietf-netconf-acm_configuration.xml", datastore="running", module="ietf-netconf-acm", format="xml")
