<?xml version="1.0" encoding="UTF-8"?>
<hello
xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
<capabilities>
<capability>urn:ietf:params:netconf:base:1.0</capability>
</capabilities></hello>]]>]]>

--------------------------------------------------------------------------------------
<?xml version="1.0" encoding="UTF-8"?>       
<nf:rpc message-id="111" xmlns:nf="urn:ietf:params:xml:ns:netconf:base:1.0" xmlns:nxos="http://www.cisco.com/nxos:1.0">             
  <nxos:exec-command>                 
    <nxos:cmd>ping 10.10.10.1</nxos:cmd> 
  </nxos:exec-command> 
</nf:rpc>]]>]]>
--------------------------------------------------------------------------------------

-------> <rpc><command format='text'>ping 192.168.1.1 </command></rpc>]]>]]>
--------------------------------------------------------------------------------------

<?xml version="1.0" encoding="UTF-8"?>
<nf:rpc message-id="113" xmlns:nf="urn:ietf:params:xml:ns:netconf:base:1.0" xmlns:nxos="http://www.cisco.com/nxos:1.0">
  <nxos:exec-command>
    <nxos:cmd format='text'>ping 10.10.10.2 count 5</nxos:cmd>
  </nxos:exec-command>
</nf:rpc>
]]>]]>

--------------------------------------------------------------------------------------

<?xml version="1.0" encoding="UTF-8"?>
<nf:rpc message-id="113" xmlns:nf="urn:ietf:params:xml:ns:netconf:base:1.0" xmlns:nxos="http://www.cisco.com/nxos:1.0">
  <nxos:exec-command>
    <nxos:cmd format='text'>show ping </nxos:cmd>
  </nxos:exec-command>
</nf:rpc>

--------------------------------------------------------------------------------------


<rpc message-id="101" xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
 <ping xmlns:nxos="http://www.cisco.com/nxos:1.0">
  <destination>
   <destination>10.10.10.1</destination>
  </destination>
 </ping>
</rpc>


<rpc message-id="101" xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
 <ping xmlns="http://cisco.com/ns/yang/Cisco-IOS-XR-ping-act">
  <destination>
   <destination>10.10.10.2</destination>
  </destination>
 </ping>
</rpc>
--------------------------------------------------------------------------------------

<?xml version="1.0"?>
<nc:rpc message-id="16" xmlns:nc="urn:ietf:params:xml:ns:netconf:base:1.0"
xmlns="http://www.cisco.com/nxos:1.0:if_manager">
  <nc:edit-config>
    <nc:target>
      <nc:running/>
    </nc:target>
    <nc:config>
      <configure>
        <__XML__MODE__exec_configure>
          <interface>
            <ethernet>
              <interface>1/7</interface>
              <__XML__MODE_if-ethernet>
                <__XML__MODE_if-eth-base>
                  <ip>
                    <address>
                      <ip_addr>12.12.12.1/24</ip_addr>
                    </address>
                  </ip>
                </__XML__MODE_if-eth-base>
              </__XML__MODE_if-ethernet>
            </ethernet>
          </interface>
        </__XML__MODE__exec_configure>
      </configure>
    </nc:config>
  </nc:edit-config>
</nc:rpc>

--------------------------------------------------------------------------------------
 
interface configuration:

<?xml version="1.0"?>
<nf:rpc xmlns:nf="urn:ietf:params:xml:ns:netconf:base:1.0"
xmlns:nxos="http://www.cisco.com/nxos:1.0" message-id="110">
  <nxos:exec-command>
    <nxos:cmd>conf t ; interface ethernet 1/5 ; no switchport ; ip address 10.10.10.1/24 ; no shutdown</nxos:cmd>
  </nxos:exec-command>
</nf:rpc>]]>]]>

--------------------------------------------------------------------------------------

<?xml version="1.0"?>
<nf:rpc xmlns:nf="urn:ietf:params:xml:ns:netconf:base:1.0"
xmlns:nxos="http://www.cisco.com/nxos:1.0" message-id="110">
  <nxos:exec-command>
    <nxos:cmd>show ip interface brief</nxos:cmd>
  </nxos:exec-command>
</nf:rpc>]]>]]>

--------------------------------------------------------------------------------------

<?xml version="1.0"?>
<nf:rpc xmlns:nf="urn:ietf:params:xml:ns:netconf:base:1.0"
xmlns:nxos="http://www.cisco.com/nxos:1.0" message-id="110">
  <nxos:exec-command>
    <nxos:cmd>show ip access-lists</nxos:cmd>
  </nxos:exec-command>
</nf:rpc>]]>]]>

--------------------------------------------------------------------------------------




<?xml version="1.0"?>
<nf:rpc xmlns:nf="urn:ietf:params:xml:ns:netconf:base:1.0"
xmlns:nxos="http://www.cisco.com/nxos:1.0" message-id="3">
<nxos:exec-command>
<nxos:cmd>configure terminal ; interface ethernet2/1 </nxos:cmd>
<nxos:cmd>ip address 192.0.2.2/24 </nxos:cmd>
<nxos:cmd>no shut; </nxos:cmd>
<nxos:cmd>show interface brief</nxos:cmd>
</nxos:exec-command>

--------------------------------------------------------------------------------------



<?xml version="1.0"?>
<nf:rpc xmlns:nf="urn:ietf:params:xml:ns:netconf:base:1.0"
xmlns:nxos="http://www.cisco.com/nxos:1.0" message-id="110">
<nxos:exec-command>
<nxos:cmd>show ip interface brief ; show run </nxos:cmd>
</nxos:exec-command>
</nf:rpc>]]>]]>

--------------------------------------------------------------------------------------


<rpc xmlns="urn:ietf:params:xml:ns:netconf:base:1.0" message-id="112">
  <edit-config>
    <target>
      <running/>
    </target>
    <config>
      <interfaces xmlns="http://www.cisco.com/nxos:1.0">
        <interface>
          <name>ethernet1/5</name>
          <ip>
            <address>10.10.10.1/24</address>
          </ip>
        </interface>
      </interfaces>
    </config>
  </edit-config>
</rpc>

--------------------------------------------------------------------------------------



<?xml version="1.0"?>
<nf:rpc xmlns:nf="urn:ietf:params:xml:ns:netconf:base:1.0"
xmlns:nxos="http://www.cisco.com/nxos:1.0" message-id="111">
  <edit-config>
    <target>
      <running/>
    </target>
    <config>
      <nxos:configure>
        <nxos:__XML__MODE__exec_configure>
          <nxos:__XML__MODE__exec_configure_interface>
            <nxos:__XML__MODE_if-eth>
              <nxos:interface>
                <nxos:ethernet>1/5</nxos:ethernet>
                <nxos:__XML__MODE_if-eth-svi>
                  <nxos:ip>
                    <nxos:address>
                      <nxos:primary>
                        <nxos:address>10.10.10.1</nxos:address>
                        <nxos:mask>255.255.255.0</nxos:mask>
                      </nxos:primary>
                    </nxos:address>
                  </nxos:ip>
                </nxos:__XML__MODE_if-eth-svi>
              </nxos:interface>
            </nxos:__XML__MODE_if-eth>
          </nxos:__XML__MODE__exec_configure_interface>
        </nxos:__XML__MODE__exec_configure>
      </nxos:configure>
    </config>
  </edit-config>
</nf:rpc>

--------------------------------------------------------------------------------------

devices:
  n9k1:
    connections:
      netconf:
        ip: 10.133.35.148
        port: 830
        protocol: ssh
        hostkey_verify: False
        look_for_keys: False

    credentials:
      default:
        password: tcs123
        username: admin
      enable:
        password: tcs123
    os: nxos
    type: router
    alias: n9k1

  n9k2:
    connections:
      netconf:
        ip: 10.133.35.150
        port: 830
        protocol: ssh
        hostkey_verify: False
        look_for_keys: False

    credentials:
      default:
        password: tcs123
        username: admin
      enable:
        password: tcs123
    os: nxos
    type: router
    alias: n9k2

  n9k3:
    connections:
      netconf:
        ip: 10.133.35.152
        port: 830
        protocol: ssh
        hostkey_verify: False
        look_for_keys: False

    credentials:
      default:
        password: tcs123
        username: admin
      enable:
        password: tcs123
    os: nxos
    type: router
    alias: n9k3

  n9k4:
    connections:
      netconf:
        ip: 10.133.35.143
        port: 830
        protocol: ssh
        hostkey_verify: False
        look_for_keys: False

    credentials:
      default:
        password: tcs123
        username: admin
      enable:
        password: tcs123
    os: nxos
    type: router
    alias: n9k4


-------------------------------------------------------------------------------------


from pyats.topology import loader
from genie.testbed import load
from pyats import aetest
import re, logging

# Load the testbed YAML file
testbed = loader.load("testbed.yaml")

# Access the device using the new name 'n9k1'
device = testbed.devices['n9k1']

# Connect to the device via netconf
device.connect(alias='nc', via='netconf')

print(device.nc.connected)

# Define the hello message XML structure
#hello_message = """
#<?xml version="1.0" encoding="UTF-8"?>
#<hello xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
#  <capabilities>
#    <capability>urn:ietf:params:netconf:base:1.0</capability>
#  </capabilities>
#</hello>
#"""
#try:
#    device.nc.request(hello_message, timeout=5)
#except TimeoutExpiredError:
#     print("Timedout expired for the hello message.")

command_request = """
<?xml version="1.0"?>
<nf:rpc xmlns:nf="urn:ietf:params:xml:ns:netconf:base:1.0"
xmlns:nxos="http://www.cisco.com/nxos:1.0"
        message-id="110">
  <nxos:exec-command>
    <nxos:cmd>show ip interface brief</nxos:cmd>
  </nxos:exec-command>
</nf:rpc>
"""

# Send the command execution request
reply_command = device.nc.request(command_request)
print(reply_command)

# Disconnect from the device
device.nc.disconnect()

# Check if the connection is closed
print(device.nc.connected)


--------------------------------------------------------------------------------------

---------
from pyats.topology import loader
from genie.testbed import load
from pyats import aetest
import re, logging

# Load the testbed YAML file
testbed = loader.load("testbed.yaml")

# Access the device using the new name 'n9k1'
device = testbed.devices['n9k1']

# Connect to the device via netconf
device.connect(alias='nc', via='netconf')

print(device.nc.connected)


command_request = """
<?xml version="1.0"?>
<nf:rpc xmlns:nf="urn:ietf:params:xml:ns:netconf:base:1.0"
xmlns:nxos="http://www.cisco.com/nxos:1.0" message-id="110">
  <nxos:exec-command>
    <nxos:cmd>conf t ; interface ethernet 1/5 ; no switchport ; ip address 10.10.10.1/24 ; no shutdown</nxos:cmd>
  </nxos:exec-command>
</nf:rpc>
"""

# Send the command execution request
reply_command = device.nc.request(command_request)
print(reply_command)

# Disconnect from the device
device.nc.disconnect()

# Check if the connection is closed
print(device.nc.connected)

--------------------------------------------------------------------------------------

-----------------

acl_config:
------------

from pyats.topology import loader
from genie.testbed import load
from pyats import aetest
import re, logging

# Load the testbed YAML file
testbed = loader.load("testbed.yaml")

# Access the device using the new name 'n9k1'
device = testbed.devices['n9k1']

# Connect to the device via netconf
device.connect(alias='nc', via='netconf')

print("NETCONF connected:", device.nc.connected)

# Define the configuration XML structure
command_request = """
<?xml version="1.0" encoding="UTF-8"?>
<nf:rpc message-id="107" xmlns:nf="urn:ietf:params:xml:ns:netconf:base:1.0" xmlns:nxos="http://www.cisco.com/nxos:1.0">
    <nxos:exec-command>
        <nxos:cmd>conf t ; ip access-list aclnqt ; 10 permit ip 10.10.10.1/24 any ; 20 permit ip 192.168.10.1/24 any</nxos:cmd>
    </nxos:exec-command>
</nf:rpc>
"""

# Send the configuration command
try:
    reply_command = device.nc.request(command_request)
    print("Configuration Reply:")
    #print(reply_command)
except Exception as e:
    print(f"Failed to send configuration command: {e}")

# Define the verification XML structure
verification_request = """
<?xml version="1.0" encoding="UTF-8"?>
<nf:rpc message-id="108" xmlns:nf="urn:ietf:params:xml:ns:netconf:base:1.0" xmlns:nxos="http://www.cisco.com/nxos:1.0">
    <nxos:exec-command>
        <nxos:cmd>show ip access-lists aclnqt</nxos:cmd>
    </nxos:exec-command>
</nf:rpc>
"""

# Send the verification command
try:
    verification_reply = device.nc.request(verification_request)
    print("Verification Reply:")
    #print(verification_reply)
except Exception as e:
    print(f"Failed to send verification command: {e}")

# Disconnect from the device
device.nc.disconnect()

# Check if the connection is closed
print("NETCONF connected after disconnect:", device.nc.connected)



--------------------------------------------------------------------------------------

from pyats.topology import loader
from pyats import aetest
import re, logging

logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

class NetconfCommonFunctions:
    @staticmethod
    def configure_acl_on_device(device, acl_name, rule):
        command_request = f"""
        <?xml version="1.0" encoding="UTF-8"?>
        <nf:rpc message-id="107" xmlns:nf="urn:ietf:params:xml:ns:netconf:base:1.0" xmlns:nxos="http://www.cisco.com/nxos:1.0">
            <nxos:exec-command>
               <nxos:cmd>conf t ; ip access-list {acl_name} ; {rule}</nxos:cmd>
            </nxos:exec-command>
        </nf:rpc>
        """
        return device.nc.request(command_request)

    @staticmethod
    def unconfigure_acl_on_device(device, acl_name):
        command_request = f"""
        <?xml version="1.0" encoding="UTF-8"?>
        <nf:rpc message-id="108" xmlns:nf="urn:ietf:params:xml:ns:netconf:base:1.0" xmlns:nxos="http://www.cisco.com/nxos:1.0">
           <nxos:exec-command>
              <nxos:cmd>conf t ; no ip access-list {acl_name}</nxos:cmd>
           </nxos:exec-command>
        </nf:rpc>
        """
        return device.nc.request(command_request)

    @staticmethod
    def configure_acl_on_interface(device, intf, acl_name, bound):
        command_request = f"""
        <?xml version="1.0" encoding="UTF-8"?>
        <nf:rpc message-id="109" xmlns:nf="urn:ietf:params:xml:ns:netconf:base:1.0" xmlns:nxos="http://www.cisco.com/nxos:1.0">
            <nxos:exec-command>
                <nxos:cmd>conf t ; interface {intf} ; ip access-group {acl_name} {bound}</nxos:cmd>
            </nxos:exec-command>
        </nf:rpc>
        """
        return device.nc.request(command_request)

    @staticmethod
    def unconfigure_acl_on_interface(device, intf, acl_name, bound):
        command_request = f"""
        <?xml version="1.0" encoding="UTF-8"?>
        <nf:rpc message-id="110" xmlns:nf="urn:ietf:params:xml:ns:netconf:base:1.0" xmlns:nxos="http://www.cisco.com/nxos:1.0">
            <nxos:exec-command>
                <nxos:cmd>conf t ; interface {intf} ; no ip access-group {acl_name} {bound}</nxos:cmd>
            </nxos:exec-command>
        </nf:rpc>
        """
        return device.nc.request(command_request)

    @staticmethod
    def ping_device(device, destination_ip):
        command_request = f"""
        <?xml version="1.0" encoding="UTF-8"?>
        <nf:rpc message-id="111" xmlns:nf="urn:ietf:params:xml:ns:netconf:base:1.0" xmlns:nxos="http://www.cisco.com/nxos:1.0">
            <nxos:exec-command>
                <nxos:cmd>ping {destination_ip}</nxos:cmd>
            </nxos:exec-command>
        </nf:rpc>
        """
        return device.nc.request(command_request)

    @staticmethod
    def validate_ping(input):
        pattern = re.compile(r'(?P<sent_pkt>\d+) packets transmitted, (?P<receive_pkt>\d+) packets received, (?P<pkt_loss>\d+)% packet loss')
        out_dict = {}
        for line in input.split('\n'):
            p1 = pattern.match(line)
            if p1:
                out_dict.update(p1.groupdict())
        return out_dict
--------------------------------------------------------------------------------------

tcs@01HW896031:~/1net_conf/pyats_netconf/netconf/jyoshna$ cat testcase2.py
from pyats.topology import loader
from pyats import aetest
import yaml
import re, logging
from lib import NetconfCommonFunctions

logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

# Load data from config file
with open("config_data.yaml", "r") as file:
    config_data = yaml.safe_load(file)

acl_name = config_data['acl_name']
rule1 = config_data['rule1']
rule2 = config_data['rule2']
rule3 = config_data['rule3']
bound = config_data['bound']
bound1 = config_data['bound1']
device1_intf = config_data['device1']['intf']
device2_ip = config_data['device3']['ip_address']

class CommonSetup(aetest.CommonSetup):
    @aetest.subsection
    def connect_to_devices(self, testbed):
        global devices
        devices = {
            'dut1': testbed.devices['n9k1'],
            'dut2': testbed.devices['n9k2'],
            'dut3': testbed.devices['n9k3']
        }
        for name, device in devices.items():
            device.connect(alias='nc', via='netconf')
            assert device.nc.connected, f"Device {name} connection failed"

class PermitACLTestcase(aetest.Testcase):

    @aetest.setup
    def setup(self):
        uut1 = devices['dut1']
        logger.info(f"Configure permit ACL on device1: {uut1.name}")
        NetconfCommonFunctions.configure_acl_on_device(uut1, acl_name, rule1)

        logger.info("Configure permit ACL on interface")
        NetconfCommonFunctions.configure_acl_on_interface(uut1, device1_intf, acl_name, bound)

    @aetest.test
    def verify_acl_and_ping(self):
        uut1 = devices['dut1']
        logger.info("Check if permit ACL is configured")
        verification_request = f"""
        <?xml version="1.0" encoding="UTF-8"?>
        <nf:rpc message-id="111" xmlns:nf="urn:ietf:params:xml:ns:netconf:base:1.0" xmlns:nxos="http://www.cisco.com/nxos:1.0">
            <nxos:exec-command>
                <nxos:cmd>show ip access-lists {acl_name}</nxos:cmd>
            </nxos:exec-command>
        </nf:rpc>
        """
        verification_reply = uut1.nc.request(verification_request)
        acl_output = str(verification_reply)
        if acl_name in acl_output:
            logger.info("Permit ACL configured on device")
        else:
            self.errored('Permit ACL is not configured on device')

        logger.info(f"Ping the IP configured on device3: {devices['dut3'].name}")
        result = NetconfCommonFunctions.ping_device(uut1, device2_ip)
        logger.info(f"Ping result: {result}")

        res_dict = NetconfCommonFunctions.validate_ping(result)
        logger.info("++++++++++++++++++++++++++++")
        logger.info(res_dict)
        logger.info("++++++++++++++++++++++++++++")

        try:
            sent_pkt = int(res_dict.get('sent_pkt', 0))
            receive_pkt = int(res_dict.get('receive_pkt', 0))
            pkt_loss = res_dict.get('pkt_loss', "0%")

            if sent_pkt == receive_pkt and pkt_loss == "0%":
                logger.info(f"Ping successful with no packet loss on device {uut1.name}")
                self.passed(f"Ping successful with no packet loss on device {uut1.name}")
            else:
                logger.info(f"Ping failed with packet loss on device {uut1.name}")
                self.failed(f"Ping failed with packet loss on device {uut1.name}: {pkt_loss}")
        except KeyError as e:
            self.failed(f"KeyError: {e} - Ping result did not contain expected keys")

    @aetest.cleanup
    def unconfigure_acl_on_device(self):
        uut1 = devices['dut1']
        logger.info("Unconfigure permit ACL on interface")
        NetconfCommonFunctions.unconfigure_acl_on_interface(uut1, device1_intf, acl_name, bound)

        logger.info(f"Unconfigure permit ACL on device: {uut1.name}")
        NetconfCommonFunctions.unconfigure_acl_on_device(uut1, acl_name)

class DenyACLTestcase(aetest.Testcase):

    @aetest.setup
    def setup(self):
        uut2 = devices['dut2']
        logger.info(f"Configure deny ACL on device2: {uut2.name}")
        NetconfCommonFunctions.configure_acl_on_device(uut2, acl_name, rule2)

        logger.info("Configure deny ACL on interface")
        NetconfCommonFunctions.configure_acl_on_interface(uut2, device1_intf, acl_name, bound)

    @aetest.test
    def verify_acl_and_ping(self):
        uut2 = devices['dut2']
        logger.info("Check if deny ACL is configured")
        verification_request = f"""
        <?xml version="1.0" encoding="UTF-8"?>
        <nf:rpc message-id="112" xmlns:nf="urn:ietf:params:xml:ns:netconf:base:1.0" xmlns:nxos="http://www.cisco.com/nxos:1.0">
            <nxos:exec-command>
                <nxos:cmd>show ip access-lists {acl_name}</nxos:cmd>
            </nxos:exec-command>
        </nf:rpc>
        """
        verification_reply = uut2.nc.request(verification_request)
        acl_output = str(verification_reply)
        if acl_name in acl_output:
            logger.info("Deny ACL configured on device")
        else:
            self.errored('Deny ACL is not configured on device')

        logger.info(f"Ping the IP configured on device3: {devices['dut3'].name}")
        result = NetconfCommonFunctions.ping_device(uut2, device2_ip)
        logger.info(f"Ping result: {result}")

        res_dict = NetconfCommonFunctions.validate_ping(result)
        logger.info("++++++++++++++++++++++++++++")
        logger.info(res_dict)
        logger.info("++++++++++++++++++++++++++++")

        try:
            sent_pkt = int(res_dict.get('sent_pkt', 0))
            receive_pkt = int(res_dict.get('receive_pkt', 0))
            pkt_loss = res_dict.get('pkt_loss', "0%")

            if sent_pkt != receive_pkt and pkt_loss == "100%":
                logger.info(f"Ping failed with packet loss on device {uut2.name}")
                self.passed(f"Success: After applying deny rule for ACL, ping failed")
            else:
                logger.info(f"Ping succeeded unexpectedly on device {uut2.name}")
                self.failed(f"Failed: After applying deny rule for ACL, ping succeeded")
        except KeyError as e:
            self.failed(f"KeyError: {e} - Ping result did not contain expected keys")

    @aetest.cleanup
    def unconfigure_acl_on_device(self):
        uut2 = devices['dut2']
        logger.info("Unconfigure deny ACL on interface")
        NetconfCommonFunctions.unconfigure_acl_on_interface(uut2, device1_intf, acl_name, bound)

        logger.info(f"Unconfigure deny ACL on device: {uut2.name}")
        NetconfCommonFunctions.unconfigure_acl_on_device(uut2, acl_name)

class CommonCleanup(aetest.CommonCleanup):
    @aetest.subsection
    def disconnect(self):
        for name, device in devices.items():
            device.nc.disconnect()
            assert not device.nc.connected, f"Device {name} disconnection failed"

if __name__ == '__main__':
    import argparse
    from pyats import aetest
    from genie.testbed import load

    parser = argparse.ArgumentParser()
    parser.add_argument('--testbed', dest='testbed', type=loader.load)
    args, unknown = parser.parse_known_args()

    aetest.main(**vars(args))



--------------------------------------------------------------------------------------



 <?xml version="1.0" encoding="UTF-8"?>
 <nf:rpc message-id="111" xmlns:nf="urn:ietf:params:xml:ns:netconf:base:1.0" xmlns:nxos="http://www.cisco.com/nxos:1.0">
     <nxos:exec-command>
         <nxos:cmd>ping 192.168.60.2</nxos:cmd>
     </nxos:exec-command>
 </nf:rpc>

--------------------------------------------------------------------------------------











main netconf_job.py
-------------------



import os
import zipfile
import pandas as pd
import openpyxl
from openpyxl.styles import Font, PatternFill
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.base import MIMEBase
from email import encoders
import matplotlib.pyplot as plt
from pyats.easypy import run
import atexit
import base64

global report_dir
global router_name, str1, l

router_name = ['n9k1#', 'n9k2#', 'n9k3#', 'n9k4#']
str1 = ['show version', 'show access']
l = []

def send_email(subject, body, html_attachment=None, png_attachment=None, dashboard_html_path=None):
    msg = MIMEMultipart()
    msg['From'] = 'jyoshnasiva297@gmail.com'
    msg['To'] = 'sivajyoshnabandi@gmail.com'
    msg['Cc'] = 'sivajyoshna7@gmail.com, sivajyoshna.b@tcs.com'
    msg['Subject'] = subject

    msg.attach(MIMEText(body, 'plain'))

    if html_attachment and os.path.exists(html_attachment):
        with open(html_attachment, 'rb') as f:
            mime = MIMEBase('application', 'octet-stream')
            mime.set_payload(f.read())
            encoders.encode_base64(mime)
            mime.add_header('Content-Disposition', 'attachment', filename=os.path.basename(html_attachment))
            msg.attach(mime)
    else:
        print("HTML attachment not found")

    if png_attachment and os.path.exists(png_attachment):
        with open(png_attachment, 'rb') as f:
            mime = MIMEBase('application', 'octet-stream')
            mime.set_payload(f.read())
            encoders.encode_base64(mime)
            mime.add_header('Content-Disposition', 'attachment', filename=os.path.basename(png_attachment))
            msg.attach(mime)
    else:
        print("PNG attachment not found")

    if dashboard_html_path and os.path.exists(dashboard_html_path):
        with open(dashboard_html_path, 'rb') as f:
            mime = MIMEBase('application', 'octet-stream')
            mime.set_payload(f.read())
            encoders.encode_base64(mime)
            mime.add_header('Content-Disposition', 'attachment', filename=os.path.basename(dashboard_html_path))
            msg.attach(mime)
    else:
        print("Dashboard HTML attachment not found")

    server = smtplib.SMTP('smtp.gmail.com', 587)
    server.starttls()
    server.login('jyoshnasiva297@gmail.com', 'kvnk goki evmv fnfl')
    server.send_message(msg)
    server.quit()

def create_dashboard(success_rate, total_testcases, output_dir):
    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(14, 7))

    # Bar chart for success rate percentages
    ax1.bar(success_rate.keys(), success_rate.values(), color=['blue', 'green', 'red'])
    ax1.set_ylabel('Percentage (%)')
    ax1.set_ylim(0, 100)
    ax1.set_title('Success Rate Percentages')

    for i, v in enumerate(success_rate.values()):
        ax1.text(i, v + 2, f"{v}%", ha='center', fontweight='bold')

    # Bar chart for total test cases
    ax2.bar(total_testcases.keys(), total_testcases.values(), color=['blue', 'green', 'red', 'orange', 'purple'])
    ax2.set_ylabel('Total Test Cases')
    ax2.set_ylim(0, 25)
    ax2.set_title('Total Test Cases')

    for i, v in enumerate(total_testcases.values()):
        ax2.text(i, v + 0.5, str(v), ha='center', fontweight='bold')

    plt.tight_layout()
    dashboard_path = os.path.join(output_dir, 'dashboard.png')
    plt.savefig(dashboard_path)
    plt.close()
    return dashboard_path

def report_html():
    global report_dir
    extract_path = "/home/tcs/1net_conf/pyats_netconf/netconf/result/"
    with zipfile.ZipFile(report_dir, 'r') as zip_ref:
        zip_ref.extractall(extract_path)

    html_op_file = "/home/tcs/1net_conf/pyats_netconf/netconf"

    res_report = os.path.join(extract_path, "netconf_job.report")
    if not os.path.exists(res_report):
        print("Report file not found")
        return

    with open(res_report, 'r') as res:
        report_content = res.read()

    data = []
    for line in report_content.splitlines():
        parts = line.strip().split(':', 1)
        if len(parts) == 2:
            if parts[0].startswith('Task') and len(parts[1].split()) > 1:
                a = parts[1].split()
                key = parts[0].strip()
                value = a[0].strip()
                status = a[1].strip()
                data.append([key, value, status])
            else:
                if parts[0].startswith('Task') and len(parts[1].split()) == 1:
                    pass
                else:
                    key, value = parts[0].strip(), parts[1].strip()
                    status = ''
                    data.append([key, value, status])

    wb = openpyxl.Workbook()
    ws = wb.active
    ws.append(['Attribute', 'Output', 'Status'])
    bold_font = Font(bold=True)
    row_num = 1
    for cell in ws[row_num]:
        cell.font = bold_font

    for key in data:
        ws.append([key[0], key[1], key[2]])

    green_fill = PatternFill(start_color='00FF00', end_color='00FF00', fill_type='solid')
    red_fill = PatternFill(start_color='FF0000', end_color='FF0000', fill_type='solid')
    yellow_fill = PatternFill(start_color='FFFF00', end_color='FFFF00', fill_type='solid')
    default_fill = PatternFill(start_color='FFFFFF', end_color='FFFFFF', fill_type='solid')

    for row in ws.iter_rows(min_row=2, max_row=ws.max_row, min_col=3, max_col=3):
        for cell in row:
            if cell.value == "PASSED":
                cell.fill = green_fill
            elif cell.value == "FAILED":
                cell.fill = red_fill
            elif cell.value == 'ERRORED':
                cell.fill = yellow_fill
            else:
                cell.fill = default_fill

    op_file = os.path.join(html_op_file, 'pyxl_report.xlsx')
    wb.save(op_file)

    html_path = os.path.join(html_op_file, 'final_report.html')
    dashboard_html_path = os.path.join(html_op_file, 'dashboard.html')

    df = pd.read_excel(op_file)
    html_table = df.to_html()

    # Read data from Excel
    excel_data = pd.read_excel(op_file)
    passed_count = excel_data[excel_data['Status'] == 'PASSED'].shape[0]
    failed_count = excel_data[excel_data['Status'] == 'FAILED'].shape[0]
    aborted_count = excel_data[excel_data['Status'] == 'ABORTED'].shape[0]
    errored_count = excel_data[excel_data['Status'] == 'ERRORED'].shape[0]
    total_count = passed_count + failed_count + aborted_count + errored_count

    success_rate = {
        "Success rate": (passed_count / total_count) * 100 if total_count > 0 else 0,
        "Passed": (passed_count / total_count) * 100 if total_count > 0 else 0,
        "Failed": (failed_count / total_count) * 100 if total_count > 0 else 0,
    }

    total_testcases = {
        "Total": total_count,
        "Passed": passed_count,
        "Failed": failed_count,
        "Aborted": aborted_count,
        "Errored": errored_count,
    }

    dashboard_path = create_dashboard(success_rate, total_testcases, html_op_file)

    # Encode the dashboard image as base64
    with open(dashboard_path, "rb") as image_file:
        encoded_string = base64.b64encode(image_file.read()).decode()

    # Create final HTML content for test report
    with open(html_path, 'w') as html_file:
        html_file.write(f"<html><head><title>Test Report</title></head><body>")
        html_file.write(f"<h1>Test Report</h1>")
        html_file.write(html_table)
        html_file.write(f"</body></html>")

    # Create dashboard HTML content with download link and chart
    with open(dashboard_html_path, 'w') as dashboard_file:
        dashboard_file.write(f"<html><head><title>Dashboard</title></head><body>")
        dashboard_file.write(f"<h1>Dashboard</h1>")
        dashboard_file.write(f'<a href="pyxl_report.xlsx" download>Download Excel Report</a><br>')
        dashboard_file.write(f'<a href="final_report.html" download>Download HTML Report</a><br>')
        dashboard_file.write(f'<img src="data:image/png;base64,{encoded_string}" alt="Dashboard"><br>')
        dashboard_file.write(f"Total: {total_count}<br>")
        dashboard_file.write(f"Passed: {passed_count}<br>")
        dashboard_file.write(f"Failed: {failed_count}<br>")
        dashboard_file.write(f"Aborted: {aborted_count}<br>")
        dashboard_file.write(f"Errored: {errored_count}<br>")
        dashboard_file.write(f"</body></html>")

    print('Link to open HTML report result :', html_path)
    print('Link to open Dashboard :', dashboard_html_path)

    # Send email notification with the HTML report and report content
    email_body = f"Test report is available at: {html_path}\n\nDashboard is available at: {dashboard_html_path}\n\nReport content:\n{report_content}"
    send_email("Netconf Test Report", email_body, html_attachment=html_path, png_attachment=dashboard_path, dashboard_html_path=dashboard_html_path)

    print('Result directory:', extract_path)

def main(runtime):
    global report_dir
    atexit.register(report_html)
    report_dir = runtime.archive
    script_file = ['testcase1.py']
    for x in script_file:
        run(x, datafile='config_data.yaml', pdb=True)

if __name__ == "__main__":
    run(main)
























import logging
from ncclient import manager

# Set up logging
logging.basicConfig(level=logging.DEBUG)

# Device details
HOST = "10.133.35.148"
USERNAME = "admin"
PASSWORD = "tcs123"  # replace with actual password

# NETCONF XML payload
xml_payload = """
<rpc xmlns="urn:ietf:params:xml:ns:netconf:base:1.0" message-id="urn:uuid:43efc290-c312-4df0-bb1b-a6e0bf8aac50">
  <edit-config>
    <target>
      <candidate/>
    </target>
    <config xmlns="http://openconfig.net/yang/interfaces">
      <interfaces>
        <interface>
          <name>Ethernet1/9</name>
          <subinterfaces>
            <subinterface>
              <index>2</index>
              <config>
                <enabled>false</enabled>
                <index>2</index>
              </config>
            </subinterface>
          </subinterfaces>
        </interface>
      </interfaces>
    </config>
  </edit-config>
</rpc>
"""

# Connect to the device
with manager.connect(
        host=HOST,
        port=830,
        username=USERNAME,
        password=PASSWORD,
        hostkey_verify=False
    ) as m:
    try:
        response = m.edit_config(target='candidate', config=xml_payload)
        print(response)
    except Exception as e:
        print(f"An error occurred: {e}")













import logging
from ncclient import manager
from lxml import etree

#logging
logging.basicConfig(level=logging.DEBUG)

# Device details
host = "10.133.35.148"
username = "admin"
password = "tcs123"

# XML payload for edit-config
xml_payload = """
<rpc xmlns="urn:ietf:params:xml:ns:netconf:base:1.0" message-id="urn:uuid:43efc290-c312-4df0-bb1b-a6e0bf8aac50">
    <edit-config>
        <target>
            <candidate/>
        </target>
        <config xmlns:xc="urn:ietf:params:xml:ns:netconf:base:1.0">
            <interfaces xmlns="http://openconfig.net/yang/interfaces">
                <interface>
                    <name>Ethernet1/9</name>
                    <subinterfaces>
                        <subinterface>
                            <index>2</index>
                            <config>
                                <enabled xc:operation="create">false</enabled>
                                <index xc:operation="create">2</index>
                            </config>
                        </subinterface>
                    </subinterfaces>
                </interface>
            </interfaces>
        </config>
    </edit-config>
</rpc>
"""

#connect device
try:
    with manager.connect(
            host=host,
            port=830,
            username=username,
            password=password,
            hostkey_verify=False
        ) as m:

        #edit-config request
        response = m.edit_config(target='candidate', config=xml_payload)
        print(response)

except Exception as e:
    print(f"An error occurred: {e}")

